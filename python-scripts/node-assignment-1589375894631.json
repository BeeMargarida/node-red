{"172.23.0.3":{"status":1,"nodes":[{"id":"16c92033.3c8ed","textId":"16c920333c8ed","type":"temperature-humidity","z":"669dab0c.81c974","predicates":["temperature","humidity","micropython","first-floor"],"priorities":[],"brokerUrl":null,"inputTopics":[],"outputTopics":["topic0_node"],"subscriptionsMQTT":{},"micropythonCode":"\nimport dht\nimport machine\nimport sys\nimport utime\noutput_topics_16c920333c8ed = [\"topic0_node\"]\npin_16c920333c8ed = 32\ninterval_16c920333c8ed = 7000\nrepeat_16c920333c8ed = True\nstop_repeat_16c920333c8ed = False\ntimer_task_16c920333c8ed = None\n\nreference_timer_workaround = []\n\ndef measure_16c920333c8ed(_):\n    pin = None\n    if sys.platform != \"linux\":\n        pin = machine.Pin(pin_16c920333c8ed)\n    d = dht.DHT22(pin)\n    d.measure()\n    temperature = d.temperature()\n    humidity = d.humidity()\n    results = dict(\n        temperature=temperature,\n        humidity=humidity,\n        _msgid=str(utime.ticks_ms())\n    )\n    loop = asyncio.get_event_loop()\n    loop.create_task(on_output(ujson.dumps(results), output_topics_16c920333c8ed))\n\ndef stop_16c920333c8ed():\n    global stop_repeat_16c920333c8ed\n    stop_repeat_16c920333c8ed = True\n    if timer_task_16c920333c8ed:\n        timer_task_16c920333c8ed.cancel()\n    for timer in reference_timer_workaround:\n        timer.deinit()\n\nasync def timer_exec_16c920333c8ed(callback, interval):\n    global timer_task_16c920333c8ed\n    if stop_repeat_16c920333c8ed:\n        return\n    callback(None)\n    await asyncio.sleep_ms(interval)\n    loop = asyncio.get_event_loop()\n    timer_task_16c920333c8ed = loop.create_task(timer_exec_16c920333c8ed(callback, interval))\n\ndef exec_16c920333c8ed():\n    if repeat_16c920333c8ed:\n        if sys.platform != \"linux\":\n            timer = machine.Timer(-1)    \n            timer.init(period=interval_16c920333c8ed, mode=machine.Timer.PERIODIC, callback=measure_16c920333c8ed)\n            reference_timer_workaround.append(timer)\n        else:\n            loop = asyncio.get_event_loop()\n            print(\"starting\")\n            loop.create_task(timer_exec_16c920333c8ed(measure_16c920333c8ed, interval_16c920333c8ed))\n    else: \n        measure_16c920333c8ed(None)\n    return\n","hasInput":false,"local":false}]},"node-red":{"status":1,"nodes":[{"id":"935c127.194eb7","textId":"935c127194eb7","type":"debug","z":"669dab0c.81c974","predicates":["node-red"],"priorities":[],"brokerUrl":null,"inputTopics":["topic4_node"],"outputTopics":[],"subscriptionsMQTT":{"topic4_node":{"topic":"topic4_node","qos":{"qos":2}}},"micropythonCode":"","hasInput":true,"local":true}]},"172.23.0.4":{"status":1,"nodes":[{"id":"79c5d6a8.b876a","textId":"79c5d6a8b876a","type":"if","z":"669dab0c.81c974","predicates":[],"priorities":["micropython"],"brokerUrl":null,"inputTopics":["topic0_node"],"outputTopics":["topic1_node"],"subscriptionsMQTT":{},"micropythonCode":"\ninput_topics_79c5d6a8b876a = [\"topic0_node\"]\noutput_topics_79c5d6a8b876a = [\"topic1_node\"]\nproperty_79c5d6a8b876a = \"payload.temperature\"\n\ndef if_rule_79c5d6a8b876a_0(a, b = 15):\n    a = int(a)\n    return a >= b\ndef if_function_79c5d6a8b876a(a):\n    res = if_rule_79c5d6a8b876a_0(a)\n    return '%s' % res\n\ndef get_property_value_79c5d6a8b876a(msg):\n    properties = property_79c5d6a8b876a.split(\".\")\n    payload = ujson.loads(msg)\n    payload = dict(payload=payload)\n\n    for property in properties:\n        try:\n            if payload[property]:\n                payload = payload[property]\n            else:\n                break\n        except:\n            break\n    return payload\n\ndef on_input_79c5d6a8b876a(topic, msg, retained):\n    print(topic)\n    print(msg)\n    msg = get_property_value_79c5d6a8b876a(msg)\n    res = if_function_79c5d6a8b876a(msg)\n    res = dict(\n        payload=res\n    )\n    loop = asyncio.get_event_loop()\n    loop.create_task(on_output(ujson.dumps(res), output_topics_79c5d6a8b876a))\n    return\n","hasInput":true,"local":false}]},"172.23.0.8":{"status":1,"nodes":[{"id":"973613f1.ffaa","textId":"973613f1ffaa","type":"temperature-humidity","z":"669dab0c.81c974","predicates":["temperature","humidity","micropython","first-floor"],"priorities":[],"brokerUrl":null,"inputTopics":[],"outputTopics":["topic2_node"],"subscriptionsMQTT":{},"micropythonCode":"\nimport dht\nimport machine\nimport sys\nimport utime\noutput_topics_973613f1ffaa = [\"topic2_node\"]\npin_973613f1ffaa = 32\ninterval_973613f1ffaa = 7000\nrepeat_973613f1ffaa = True\nstop_repeat_973613f1ffaa = False\ntimer_task_973613f1ffaa = None\n\nreference_timer_workaround = []\n\ndef measure_973613f1ffaa(_):\n    pin = None\n    if sys.platform != \"linux\":\n        pin = machine.Pin(pin_973613f1ffaa)\n    d = dht.DHT22(pin)\n    d.measure()\n    temperature = d.temperature()\n    humidity = d.humidity()\n    results = dict(\n        temperature=temperature,\n        humidity=humidity,\n        _msgid=str(utime.ticks_ms())\n    )\n    loop = asyncio.get_event_loop()\n    loop.create_task(on_output(ujson.dumps(results), output_topics_973613f1ffaa))\n\ndef stop_973613f1ffaa():\n    global stop_repeat_973613f1ffaa\n    stop_repeat_973613f1ffaa = True\n    if timer_task_973613f1ffaa:\n        timer_task_973613f1ffaa.cancel()\n    for timer in reference_timer_workaround:\n        timer.deinit()\n\nasync def timer_exec_973613f1ffaa(callback, interval):\n    global timer_task_973613f1ffaa\n    if stop_repeat_973613f1ffaa:\n        return\n    callback(None)\n    await asyncio.sleep_ms(interval)\n    loop = asyncio.get_event_loop()\n    timer_task_973613f1ffaa = loop.create_task(timer_exec_973613f1ffaa(callback, interval))\n\ndef exec_973613f1ffaa():\n    if repeat_973613f1ffaa:\n        if sys.platform != \"linux\":\n            timer = machine.Timer(-1)    \n            timer.init(period=interval_973613f1ffaa, mode=machine.Timer.PERIODIC, callback=measure_973613f1ffaa)\n            reference_timer_workaround.append(timer)\n        else:\n            loop = asyncio.get_event_loop()\n            print(\"starting\")\n            loop.create_task(timer_exec_973613f1ffaa(measure_973613f1ffaa, interval_973613f1ffaa))\n    else: \n        measure_973613f1ffaa(None)\n    return\n","hasInput":false,"local":false}]},"172.23.0.5":{"status":1,"nodes":[{"id":"ef4575ed.beefe8","textId":"ef4575edbeefe8","type":"if","z":"669dab0c.81c974","predicates":[],"priorities":["micropython"],"brokerUrl":null,"inputTopics":["topic2_node"],"outputTopics":["topic3_node"],"subscriptionsMQTT":{},"micropythonCode":"\ninput_topics_ef4575edbeefe8 = [\"topic2_node\"]\noutput_topics_ef4575edbeefe8 = [\"topic3_node\"]\nproperty_ef4575edbeefe8 = \"payload.temperature\"\n\ndef if_rule_ef4575edbeefe8_0(a, b = 15):\n    a = int(a)\n    return a >= b\ndef if_function_ef4575edbeefe8(a):\n    res = if_rule_ef4575edbeefe8_0(a)\n    return '%s' % res\n\ndef get_property_value_ef4575edbeefe8(msg):\n    properties = property_ef4575edbeefe8.split(\".\")\n    payload = ujson.loads(msg)\n    payload = dict(payload=payload)\n\n    for property in properties:\n        try:\n            if payload[property]:\n                payload = payload[property]\n            else:\n                break\n        except:\n            break\n    return payload\n\ndef on_input_ef4575edbeefe8(topic, msg, retained):\n    print(topic)\n    print(msg)\n    msg = get_property_value_ef4575edbeefe8(msg)\n    res = if_function_ef4575edbeefe8(msg)\n    res = dict(\n        payload=res\n    )\n    loop = asyncio.get_event_loop()\n    loop.create_task(on_output(ujson.dumps(res), output_topics_ef4575edbeefe8))\n    return\n","hasInput":true,"local":false}]},"172.23.0.6":{"status":1,"nodes":[{"id":"3d8abc0f.ac4bec","textId":"3d8abc0fac4bec","type":"and","z":"669dab0c.81c974","predicates":[],"priorities":["micropython"],"brokerUrl":null,"inputTopics":["topic1_node","topic3_node"],"outputTopics":["topic4_node"],"subscriptionsMQTT":{},"micropythonCode":"\ninput_topics_3d8abc0fac4bec = [\"topic1_node\",\"topic3_node\"]\noutput_topics_3d8abc0fac4bec = [\"topic4_node\"]\nnr_inputs_3d8abc0fac4bec = 2\nproperty_3d8abc0fac4bec = \"payload\"\ninputs_3d8abc0fac4bec = []\ntopics_3d8abc0fac4bec = []\n\ndef get_property_value_3d8abc0fac4bec(msg):\n    properties = property_3d8abc0fac4bec.split(\".\")\n    payload = ujson.loads(msg)\n\n    for property in properties:\n        try:\n            if payload[property]:\n                payload = payload[property]\n            else:\n                print(\"3d8abc0fac4bec: Property not found\")\n                break\n        except:\n            print(\"3d8abc0fac4bec: Msg is not an object\")\n            break\n\n    return payload\n\ndef on_input_3d8abc0fac4bec(topic, msg, retained):\n    global inputs_3d8abc0fac4bec\n    global topics_3d8abc0fac4bec\n\n    if not topic in topics_3d8abc0fac4bec:\n        topics_3d8abc0fac4bec.append(topic)\n        msg = get_property_value_3d8abc0fac4bec(msg)\n        if (msg == 'True') or (msg == 'true'):\n            inputs_3d8abc0fac4bec.append(True)\n        elif (msg == 'False') or (msg == 'false'):\n            inputs_3d8abc0fac4bec.append(False)\n    \n    if len(topics_3d8abc0fac4bec) == nr_inputs_3d8abc0fac4bec:\n        result = True\n        for entry in inputs_3d8abc0fac4bec:\n            result = result and entry\n        res = dict(\n            payload=result\n        )\n        loop = asyncio.get_event_loop()\n        loop.create_task(on_output(ujson.dumps(res), output_topics_3d8abc0fac4bec))\n        inputs_3d8abc0fac4bec = []\n        topics_3d8abc0fac4bec = []\n    \n    return\n","hasInput":true,"local":false}]}}