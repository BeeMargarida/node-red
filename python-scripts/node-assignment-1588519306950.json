{
    "192.168.1.206": {
        "status": 1,
        "nodes": [
            {
                "id": "50b1607d.098af",
                "textId": "50b1607d098af",
                "type": "and",
                "z": "324fbd91.f7a0da",
                "predicates": [
                    "first-floor"
                ],
                "priorities": [
                    "micropython"
                ],
                "brokerUrl": null,
                "inputTopics": [
                    "topic1_node",
                    "topic2_node"
                ],
                "outputTopics": [
                    "topic0_node"
                ],
                "subscriptionsMQTT": {},
                "micropythonCode": "\ninput_topics_50b1607d098af = [\"topic1_node\",\"topic2_node\"]\noutput_topics_50b1607d098af = [\"topic0_node\"]\nnr_inputs_50b1607d098af = 2\nproperty_50b1607d098af = \"payload\"\ninputs_50b1607d098af = []\ntopics_50b1607d098af = []\n\ndef get_property_value_50b1607d098af(msg):\n    properties = property_50b1607d098af.split(\".\")\n    payload = ujson.loads(msg)\n\n    for property in properties:\n        try:\n            if payload[property]:\n                payload = payload[property]\n            else:\n                print(\"50b1607d098af: Property not found\")\n                break\n        except:\n            print(\"50b1607d098af: Msg is not an object\")\n            break\n\n    return payload\n\ndef on_input_50b1607d098af(topic, msg, retained):\n    global inputs_50b1607d098af\n    global topics_50b1607d098af\n\n    if not topic in topics_50b1607d098af:\n        topics_50b1607d098af.append(topic)\n        msg = get_property_value_50b1607d098af(msg)\n        if (msg == 'True') or (msg == 'true'):\n            inputs_50b1607d098af.append(True)\n        elif (msg == 'False') or (msg == 'false'):\n            inputs_50b1607d098af.append(False)\n    \n    if len(topics_50b1607d098af) == nr_inputs_50b1607d098af:\n        result = True\n        for entry in inputs_50b1607d098af:\n            result = result and entry\n        res = dict(\n            payload=result\n        )\n        print(\"AND: \" + ujson.dumps(res))\n        loop = asyncio.get_event_loop()\n        loop.create_task(on_output(ujson.dumps(res), output_topics_50b1607d098af))\n        inputs_50b1607d098af = []\n        topics_50b1607d098af = []\n    \n    return\n",
                "hasInput": true,
                "local": false
            },
            {
                "id": "652c4f85.5f4e4",
                "textId": "652c4f855f4e4",
                "type": "temperature-humidity",
                "z": "a505652b.a855a",
                "_alias": "bd7de2f8.986ec8",
                "predicates": [
                    "temperature",
                    "humidity",
                    "micropython"
                ],
                "priorities": [],
                "brokerUrl": null,
                "inputTopics": [],
                "outputTopics": [
                    "topica505652ba855a_node_sub"
                ],
                "subscriptionsMQTT": {},
                "micropythonCode": "\nimport dht\ngc.collect()\nimport machine\ngc.collect()\noutput_topics_652c4f855f4e4 = [\"topica505652ba855a_node_sub\"]\npin_652c4f855f4e4 = 32\ninterval_652c4f855f4e4 = 6000\nrepeat_652c4f855f4e4 = True\n\nreference_timer_workaround = []\n\ndef measure_652c4f855f4e4(_):\n    d = dht.DHT22(machine.Pin(pin_652c4f855f4e4))\n    d.measure()\n    temperature = d.temperature()\n    humidity = d.humidity()\n    results = dict(\n        payload=dict(\n            temperature=temperature,\n            humidity=humidity\n        ) \n    )\n    loop = asyncio.get_event_loop()\n    loop.create_task(on_output(ujson.dumps(results), output_topics_652c4f855f4e4))\n\ndef stop_652c4f855f4e4():\n    for timer in reference_timer_workaround:\n        timer.deinit()\n\ndef exec_652c4f855f4e4():\n    if repeat_652c4f855f4e4:\n        timer = machine.Timer(-1)    \n        timer.init(period=interval_652c4f855f4e4, mode=machine.Timer.PERIODIC, callback=measure_652c4f855f4e4)\n        reference_timer_workaround.append(timer)\n    else: \n        measure_652c4f855f4e4(None)\n    return\n",
                "hasInput": false,
                "local": false
            }
        ]
    },
    "192.168.1.200": {
        "status": 1,
        "nodes": [
            {
                "id": "89e731aa.94d7d",
                "textId": "89e731aa94d7d",
                "type": "mqtt out",
                "z": "324fbd91.f7a0da",
                "predicates": [],
                "priorities": [
                    "micropython"
                ],
                "brokerUrl": null,
                "inputTopics": [
                    "topic0_node"
                ],
                "outputTopics": [],
                "subscriptionsMQTT": {},
                "micropythonCode": "\ninput_topics_89e731aa94d7d = [\"topic0_node\"]\noutput_topics_89e731aa94d7d = [\"results\"]\n\ndef on_input_89e731aa94d7d(topic, msg, retained):\n    print(msg)            \n    loop = asyncio.get_event_loop()\n    loop.create_task(on_output(msg, output_topics_89e731aa94d7d))\n",
                "hasInput": true,
                "local": false
            },
            {
                "id": "811d44e1.d60768",
                "textId": "811d44e1d60768",
                "type": "temperature-humidity",
                "z": "233cfe16.d92bc2",
                "_alias": "663040cf.ba6eb",
                "predicates": [
                    "temperature",
                    "humidity",
                    "micropython"
                ],
                "priorities": [],
                "brokerUrl": null,
                "inputTopics": [],
                "outputTopics": [
                    "topic233cfe16d92bc2_node_sub"
                ],
                "subscriptionsMQTT": {},
                "micropythonCode": "\nimport dht\ngc.collect()\nimport machine\ngc.collect()\noutput_topics_811d44e1d60768 = [\"topic233cfe16d92bc2_node_sub\"]\npin_811d44e1d60768 = 32\ninterval_811d44e1d60768 = 5000\nrepeat_811d44e1d60768 = True\n\nreference_timer_workaround = []\n\ndef measure_811d44e1d60768(_):\n    d = dht.DHT22(machine.Pin(pin_811d44e1d60768))\n    d.measure()\n    temperature = d.temperature()\n    humidity = d.humidity()\n    results = dict(\n        payload=dict(\n            temperature=temperature,\n            humidity=humidity\n        ) \n    )\n    loop = asyncio.get_event_loop()\n    loop.create_task(on_output(ujson.dumps(results), output_topics_811d44e1d60768))\n\ndef stop_811d44e1d60768():\n    for timer in reference_timer_workaround:\n        timer.deinit()\n\ndef exec_811d44e1d60768():\n    if repeat_811d44e1d60768:\n        timer = machine.Timer(-1)    \n        timer.init(period=interval_811d44e1d60768, mode=machine.Timer.PERIODIC, callback=measure_811d44e1d60768)\n        reference_timer_workaround.append(timer)\n    else: \n        measure_811d44e1d60768(None)\n    return\n",
                "hasInput": false,
                "local": false
            }
        ]
    },
    "192.168.1.207": {
        "status": 1,
        "nodes": [
            {
                "id": "26536583.5d8e8a",
                "textId": "265365835d8e8a",
                "type": "if",
                "z": "233cfe16.d92bc2",
                "_alias": "e53fd367.3ba1c",
                "predicates": [],
                "priorities": [
                    "micropython"
                ],
                "brokerUrl": null,
                "inputTopics": [
                    "topic233cfe16d92bc2_node_sub"
                ],
                "outputTopics": [
                    "topic1_node"
                ],
                "subscriptionsMQTT": {},
                "micropythonCode": "\ninput_topics_265365835d8e8a = [\"topic233cfe16d92bc2_node_sub\"]\noutput_topics_265365835d8e8a = [\"topic1_node\"]\nproperty_265365835d8e8a = \"payload.temperature\"\n\ndef if_rule_265365835d8e8a_0(a, b = 20):\n    a = int(a)\n    return a >= b\ndef if_function_265365835d8e8a(a):\n    res = if_rule_265365835d8e8a_0(a)\n    return '%s' % res\n\ndef get_property_value_265365835d8e8a(msg):\n    properties = property_265365835d8e8a.split(\".\")\n    payload = ujson.loads(msg)\n\n    for property in properties:\n        try:\n            if payload[property]:\n                payload = payload[property]\n            else:\n                break\n        except:\n            break\n    return payload\n\ndef on_input_265365835d8e8a(topic, msg, retained):\n    msg = get_property_value_265365835d8e8a(msg)\n    res = if_function_265365835d8e8a(msg)\n    res = dict(\n        payload=res\n    )\n    loop = asyncio.get_event_loop()\n    loop.create_task(on_output(ujson.dumps(res), output_topics_265365835d8e8a))\n    return\n",
                "hasInput": true,
                "local": false
            },
            {
                "id": "a21867c3.2cc058",
                "textId": "a21867c32cc058",
                "type": "if",
                "z": "a505652b.a855a",
                "_alias": "5e193083.ed5cd",
                "predicates": [],
                "priorities": [
                    "micropython"
                ],
                "brokerUrl": null,
                "inputTopics": [
                    "topica505652ba855a_node_sub"
                ],
                "outputTopics": [
                    "topic2_node"
                ],
                "subscriptionsMQTT": {},
                "micropythonCode": "\ninput_topics_a21867c32cc058 = [\"topica505652ba855a_node_sub\"]\noutput_topics_a21867c32cc058 = [\"topic2_node\"]\nproperty_a21867c32cc058 = \"payload.humidity\"\n\ndef if_rule_a21867c32cc058_0(a, b = 20):\n    a = int(a)\n    return a >= b\ndef if_function_a21867c32cc058(a):\n    res = if_rule_a21867c32cc058_0(a)\n    return '%s' % res\n\ndef get_property_value_a21867c32cc058(msg):\n    properties = property_a21867c32cc058.split(\".\")\n    payload = ujson.loads(msg)\n\n    for property in properties:\n        try:\n            if payload[property]:\n                payload = payload[property]\n            else:\n                break\n        except:\n            break\n    return payload\n\ndef on_input_a21867c32cc058(topic, msg, retained):\n    msg = get_property_value_a21867c32cc058(msg)\n    res = if_function_a21867c32cc058(msg)\n    res = dict(\n        payload=res\n    )\n    loop = asyncio.get_event_loop()\n    loop.create_task(on_output(ujson.dumps(res), output_topics_a21867c32cc058))\n    return\n",
                "hasInput": true,
                "local": false
            }
        ]
    }
}