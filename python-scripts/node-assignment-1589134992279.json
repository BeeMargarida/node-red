{"192.168.176.3":{"status":1,"nodes":[{"id":"c9ba6756.162ab8","textId":"c9ba6756162ab8","type":"temperature-humidity","z":"900e92b1.e05098","predicates":["temperature","humidity","micropython"],"priorities":[],"brokerUrl":null,"inputTopics":[],"outputTopics":["topic0_node"],"subscriptionsMQTT":{},"micropythonCode":"\nimport dht\nimport machine\nimport sys\noutput_topics_c9ba6756162ab8 = [\"topic0_node\"]\npin_c9ba6756162ab8 = 32\ninterval_c9ba6756162ab8 = 5000\nrepeat_c9ba6756162ab8 = True\nstop_repeat_c9ba6756162ab8 = False\n\nreference_timer_workaround = []\n\ndef measure_c9ba6756162ab8(_):\n    pin = None\n    if sys.platform != \"linux\":\n        pin = machine.Pin(pin_c9ba6756162ab8)\n    d = dht.DHT22(pin)\n    d.measure()\n    temperature = d.temperature()\n    humidity = d.humidity()\n    results = dict(\n        payload=dict(\n            temperature=temperature,\n            humidity=humidity\n        ) \n    )\n    loop = asyncio.get_event_loop()\n    loop.create_task(on_output(ujson.dumps(results), output_topics_c9ba6756162ab8))\n\ndef stop_c9ba6756162ab8():\n    global stop_repeat_c9ba6756162ab8\n    stop_repeat_c9ba6756162ab8 = True\n    for timer in reference_timer_workaround:\n        timer.deinit()\n\nasync def timer_exec_c9ba6756162ab8(callback, interval):\n    if stop_repeat_c9ba6756162ab8:\n        return\n    callback(None)\n    await asyncio.sleep_ms(interval)\n    loop = asyncio.get_event_loop()\n    loop.create_task(timer_exec_c9ba6756162ab8(callback, interval))\n\ndef exec_c9ba6756162ab8():\n    if repeat_c9ba6756162ab8:\n        if sys.platform != \"linux\":\n            timer = machine.Timer(-1)    \n            timer.init(period=interval_c9ba6756162ab8, mode=machine.Timer.PERIODIC, callback=measure_c9ba6756162ab8)\n            reference_timer_workaround.append(timer)\n        else:\n            loop = asyncio.get_event_loop()\n            loop.create_task(timer_exec_c9ba6756162ab8(measure_c9ba6756162ab8, interval_c9ba6756162ab8))\n    else: \n        measure_c9ba6756162ab8(None)\n    return\n","hasInput":false,"local":false}]},"192.168.176.8":{"status":1,"nodes":[{"id":"8d4b1449.c8d91","textId":"8d4b1449c8d91","type":"temperature-humidity","z":"900e92b1.e05098","predicates":["temperature","humidity","micropython","first-floor"],"priorities":[],"brokerUrl":null,"inputTopics":[],"outputTopics":["topic1_node"],"subscriptionsMQTT":{},"micropythonCode":"\nimport dht\nimport machine\nimport sys\noutput_topics_8d4b1449c8d91 = [\"topic1_node\"]\npin_8d4b1449c8d91 = 32\ninterval_8d4b1449c8d91 = 5000\nrepeat_8d4b1449c8d91 = True\nstop_repeat_8d4b1449c8d91 = False\n\nreference_timer_workaround = []\n\ndef measure_8d4b1449c8d91(_):\n    pin = None\n    if sys.platform != \"linux\":\n        pin = machine.Pin(pin_8d4b1449c8d91)\n    d = dht.DHT22(pin)\n    d.measure()\n    temperature = d.temperature()\n    humidity = d.humidity()\n    results = dict(\n        payload=dict(\n            temperature=temperature,\n            humidity=humidity\n        ) \n    )\n    loop = asyncio.get_event_loop()\n    loop.create_task(on_output(ujson.dumps(results), output_topics_8d4b1449c8d91))\n\ndef stop_8d4b1449c8d91():\n    global stop_repeat_8d4b1449c8d91\n    stop_repeat_8d4b1449c8d91 = True\n    for timer in reference_timer_workaround:\n        timer.deinit()\n\nasync def timer_exec_8d4b1449c8d91(callback, interval):\n    if stop_repeat_8d4b1449c8d91:\n        return\n    callback(None)\n    await asyncio.sleep_ms(interval)\n    loop = asyncio.get_event_loop()\n    loop.create_task(timer_exec_8d4b1449c8d91(callback, interval))\n\ndef exec_8d4b1449c8d91():\n    if repeat_8d4b1449c8d91:\n        if sys.platform != \"linux\":\n            timer = machine.Timer(-1)    \n            timer.init(period=interval_8d4b1449c8d91, mode=machine.Timer.PERIODIC, callback=measure_8d4b1449c8d91)\n            reference_timer_workaround.append(timer)\n        else:\n            loop = asyncio.get_event_loop()\n            loop.create_task(timer_exec_8d4b1449c8d91(measure_8d4b1449c8d91, interval_8d4b1449c8d91))\n    else: \n        measure_8d4b1449c8d91(None)\n    return\n","hasInput":false,"local":false}]},"192.168.176.4":{"status":1,"nodes":[{"id":"9cbe20c6.3332a","textId":"9cbe20c63332a","type":"if","z":"900e92b1.e05098","predicates":[],"priorities":["micropython"],"brokerUrl":null,"inputTopics":["topic0_node"],"outputTopics":["topic2_node","topic3_node"],"subscriptionsMQTT":{},"micropythonCode":"\ninput_topics_9cbe20c63332a = [\"topic0_node\"]\noutput_topics_9cbe20c63332a = [\"topic2_node\",\"topic3_node\"]\nproperty_9cbe20c63332a = \"payload.temperature\"\n\ndef if_rule_9cbe20c63332a_0(a, b = 15):\n    a = int(a)\n    return a >= b\ndef if_function_9cbe20c63332a(a):\n    res = if_rule_9cbe20c63332a_0(a)\n    return '%s' % res\n\ndef get_property_value_9cbe20c63332a(msg):\n    properties = property_9cbe20c63332a.split(\".\")\n    payload = ujson.loads(msg)\n\n    for property in properties:\n        try:\n            if payload[property]:\n                payload = payload[property]\n            else:\n                break\n        except:\n            break\n    return payload\n\ndef on_input_9cbe20c63332a(topic, msg, retained):\n    print(topic)\n    print(msg)\n    msg = get_property_value_9cbe20c63332a(msg)\n    res = if_function_9cbe20c63332a(msg)\n    res = dict(\n        payload=res\n    )\n    loop = asyncio.get_event_loop()\n    loop.create_task(on_output(ujson.dumps(res), output_topics_9cbe20c63332a))\n    return\n","hasInput":true,"local":false}]},"192.168.176.5":{"status":1,"nodes":[{"id":"a4327ad5.b4ba8","textId":"a4327ad5b4ba8","type":"if","z":"900e92b1.e05098","predicates":[],"priorities":["micropython"],"brokerUrl":null,"inputTopics":["topic1_node"],"outputTopics":["topic4_node","topic5_node"],"subscriptionsMQTT":{},"micropythonCode":"\ninput_topics_a4327ad5b4ba8 = [\"topic1_node\"]\noutput_topics_a4327ad5b4ba8 = [\"topic4_node\",\"topic5_node\"]\nproperty_a4327ad5b4ba8 = \"payload.temperature\"\n\ndef if_rule_a4327ad5b4ba8_0(a, b = 15):\n    a = int(a)\n    return a >= b\ndef if_function_a4327ad5b4ba8(a):\n    res = if_rule_a4327ad5b4ba8_0(a)\n    return '%s' % res\n\ndef get_property_value_a4327ad5b4ba8(msg):\n    properties = property_a4327ad5b4ba8.split(\".\")\n    payload = ujson.loads(msg)\n\n    for property in properties:\n        try:\n            if payload[property]:\n                payload = payload[property]\n            else:\n                break\n        except:\n            break\n    return payload\n\ndef on_input_a4327ad5b4ba8(topic, msg, retained):\n    print(topic)\n    print(msg)\n    msg = get_property_value_a4327ad5b4ba8(msg)\n    res = if_function_a4327ad5b4ba8(msg)\n    res = dict(\n        payload=res\n    )\n    loop = asyncio.get_event_loop()\n    loop.create_task(on_output(ujson.dumps(res), output_topics_a4327ad5b4ba8))\n    return\n","hasInput":true,"local":false}]},"192.168.176.6":{"status":1,"nodes":[{"id":"aa22be3.26ee84","textId":"aa22be326ee84","type":"and","z":"900e92b1.e05098","predicates":[],"priorities":["micropython"],"brokerUrl":null,"inputTopics":["topic2_node","topic4_node"],"outputTopics":["topic6_node"],"subscriptionsMQTT":{},"micropythonCode":"\ninput_topics_aa22be326ee84 = [\"topic2_node\",\"topic4_node\"]\noutput_topics_aa22be326ee84 = [\"topic6_node\"]\nnr_inputs_aa22be326ee84 = 2\nproperty_aa22be326ee84 = \"payload\"\ninputs_aa22be326ee84 = []\ntopics_aa22be326ee84 = []\n\ndef get_property_value_aa22be326ee84(msg):\n    properties = property_aa22be326ee84.split(\".\")\n    payload = ujson.loads(msg)\n\n    for property in properties:\n        try:\n            if payload[property]:\n                payload = payload[property]\n            else:\n                print(\"aa22be326ee84: Property not found\")\n                break\n        except:\n            print(\"aa22be326ee84: Msg is not an object\")\n            break\n\n    return payload\n\ndef on_input_aa22be326ee84(topic, msg, retained):\n    global inputs_aa22be326ee84\n    global topics_aa22be326ee84\n\n    if not topic in topics_aa22be326ee84:\n        topics_aa22be326ee84.append(topic)\n        msg = get_property_value_aa22be326ee84(msg)\n        if (msg == 'True') or (msg == 'true'):\n            inputs_aa22be326ee84.append(True)\n        elif (msg == 'False') or (msg == 'false'):\n            inputs_aa22be326ee84.append(False)\n    \n    if len(topics_aa22be326ee84) == nr_inputs_aa22be326ee84:\n        result = True\n        for entry in inputs_aa22be326ee84:\n            result = result and entry\n        res = dict(\n            payload=result\n        )\n        loop = asyncio.get_event_loop()\n        loop.create_task(on_output(ujson.dumps(res), output_topics_aa22be326ee84))\n        inputs_aa22be326ee84 = []\n        topics_aa22be326ee84 = []\n    \n    return\n","hasInput":true,"local":false}]},"node-red":{"status":1,"nodes":[{"id":"18498dde.029b1a","textId":"18498dde029b1a","type":"debug","z":"900e92b1.e05098","predicates":["node-red"],"priorities":[],"brokerUrl":null,"inputTopics":["topic6_node"],"outputTopics":[],"subscriptionsMQTT":{},"micropythonCode":"","hasInput":true,"local":true},{"id":"3b2366a4.7db92a","textId":"3b2366a47db92a","type":"debug","z":"900e92b1.e05098","predicates":["node-red"],"priorities":[],"brokerUrl":null,"inputTopics":["topic3_node"],"outputTopics":[],"subscriptionsMQTT":{},"micropythonCode":"","hasInput":true,"local":true},{"id":"7af59c3.ceefc64","textId":"7af59c3ceefc64","type":"debug","z":"900e92b1.e05098","predicates":["node-red"],"priorities":[],"brokerUrl":null,"inputTopics":["topic5_node"],"outputTopics":[],"subscriptionsMQTT":{},"micropythonCode":"","hasInput":true,"local":true}]}}