{"192.168.1.200":{"status":1,"nodes":[{"id":"a58d53e4.2067c","textId":"a58d53e42067c","type":"temperature-humidity","z":"de67f022.02abd8","predicates":["temperature","humidity","micropython"],"priorities":[],"brokerUrl":null,"inputTopics":[],"outputTopics":["topic0_node"],"subscriptionsMQTT":{},"micropythonCode":"\nimport dht\ngc.collect()\nimport machine\ngc.collect()\noutput_topics_a58d53e42067c = [\"topic0_node\"]\npin_a58d53e42067c = 32\ninterval_a58d53e42067c = 5000\nrepeat_a58d53e42067c = True\n\nreference_timer_workaround = []\n\ndef measure_a58d53e42067c(_):\n    d = dht.DHT22(machine.Pin(pin_a58d53e42067c))\n    d.measure()\n    temperature = d.temperature()\n    humidity = d.humidity()\n    results = dict(\n        payload=dict(\n            temperature=temperature,\n            humidity=humidity\n        ) \n    )\n    loop = asyncio.get_event_loop()\n    loop.create_task(on_output(ujson.dumps(results), output_topics_a58d53e42067c))\n\ndef stop_a58d53e42067c():\n    for timer in reference_timer_workaround:\n        timer.deinit()\n\ndef exec_a58d53e42067c():\n    if repeat_a58d53e42067c:\n        timer = machine.Timer(-1)    \n        timer.init(period=interval_a58d53e42067c, mode=machine.Timer.PERIODIC, callback=measure_a58d53e42067c)\n        reference_timer_workaround.append(timer)\n    else: \n        measure_a58d53e42067c(None)\n    return\n","hasInput":false,"local":false}]},"192.168.1.207":{"status":1,"nodes":[{"id":"7156e3bb.656294","textId":"7156e3bb656294","type":"if","z":"de67f022.02abd8","predicates":[],"priorities":["micropython"],"brokerUrl":null,"inputTopics":["topic0_node"],"outputTopics":["topic1_node"],"subscriptionsMQTT":{},"micropythonCode":"\ninput_topics_7156e3bb656294 = [\"topic0_node\"]\noutput_topics_7156e3bb656294 = [\"topic1_node\"]\nproperty_7156e3bb656294 = \"payload.temperature\"\n\ndef if_rule_7156e3bb656294_0(a, b = 20):\n    a = int(a)\n    return a >= b\ndef if_function_7156e3bb656294(a):\n    res = if_rule_7156e3bb656294_0(a)\n    return '%s' % res\n\ndef get_property_value_7156e3bb656294(msg):\n    properties = property_7156e3bb656294.split(\".\")\n    payload = ujson.loads(msg)\n\n    for property in properties:\n        try:\n            if payload[property]:\n                payload = payload[property]\n            else:\n                break\n        except:\n            break\n    return payload\n\ndef on_input_7156e3bb656294(topic, msg, retained):\n    msg = get_property_value_7156e3bb656294(msg)\n    res = if_function_7156e3bb656294(msg)\n    res = dict(\n        payload=res\n    )\n    loop = asyncio.get_event_loop()\n    loop.create_task(on_output(ujson.dumps(res), output_topics_7156e3bb656294))\n    return\n","hasInput":true,"local":false}]},"192.168.1.206":{"status":1,"nodes":[{"id":"77f4640a.c86d5c","textId":"77f4640ac86d5c","type":"mqtt out","z":"de67f022.02abd8","predicates":[],"priorities":["micropython"],"brokerUrl":null,"inputTopics":["topic1_node"],"outputTopics":[],"subscriptionsMQTT":{},"micropythonCode":"\ninput_topics_77f4640ac86d5c = [\"topic1_node\"]\noutput_topics_77f4640ac86d5c = [\"results\"]\n\ndef on_input_77f4640ac86d5c(topic, msg, retained):\n    print(msg)            \n    loop = asyncio.get_event_loop()\n    loop.create_task(on_output(msg, output_topics_77f4640ac86d5c))\n","hasInput":true,"local":false}]},"node-red":{"status":1,"nodes":[{"id":"a7cf8e8e.377c28","textId":"a7cf8e8e377c28","type":"orchestrator","z":"de67f022.02abd8","predicates":["node-red"],"priorities":[],"brokerUrl":null,"inputTopics":[],"outputTopics":["topic2_node"],"subscriptionsMQTT":{},"micropythonCode":"","hasInput":true,"local":true},{"id":"1ed7a4ff.747b7b","textId":"1ed7a4ff747b7b","type":"debug","z":"de67f022.02abd8","predicates":["node-red"],"priorities":[],"brokerUrl":null,"inputTopics":["topic2_node"],"outputTopics":[],"subscriptionsMQTT":{"topic2_node":{"topic":"topic2_node","qos":{"qos":2}}},"micropythonCode":"","hasInput":true,"local":true}]}}