/**
 * Copyright JS Foundation and other contributors, http://js.foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

module.exports = function (RED) {
    "use strict";

    function AndNode(n) {
        RED.nodes.createNode(this, n);
        const node = this;
        this.name = n.name;
        this.count = parseInt(n.count);
        this.micropythonCode = n.micropythonCode || "";

        this.topics = []
        this.inputs = [];

        this.on("input", function (msg, done) {
            try {

                if (msg.hasOwnProperty("topic") && this.topics.indexOf(msg.topic) === -1) {
                    this.inputs.push(msg.payload);
                    this.topics.push(msg.topic);
                }

                if (this.topics.length === this.count) {
                    let result = true;
                    for (let i = 0; i < this.inputs.length; i++) {
                        result = result && this.inputs[i];
                    }

                    const msg = { payload: result };
                    node.send(msg);

                    this.topics = [];
                    this.inputs = [];
                }
            } catch (err) {
                done(JSON.stringify(err));
            }
        });
        this.on("close", function () {
            this.status({});
        });

        generateMicropythonCode(this.count);

        // const fs = require('fs');
        // fs.writeFile(`python-scripts/11-and-${node.id}.py`, node.micropythonCode, function (err) {
        //     if (err) {
        //         return console.log(err);
        //     }
        //     console.log("The file was saved!");
        // });

        /**
         * [MINE]
         * 
         * Generates micropython code that exxecutes the switch behaviour
         * 
         * @param {*} rules 
         */
        function generateMicropythonCode(count) {
            const code =
                `\ninput_topics_${node.textId} = [${node.inputTopics.map(a => `"${a}"`)}]
output_topics_${node.textId} = [${node.outputTopics.map(a => `"${a}"`)}]
nr_inputs_${node.textId} = ${count}
inputs_${node.textId} = []
topics_${node.textId} = []

def on_input_${node.textId}(topic, msg, retained):
    global inputs_${node.textId}
    glboal topics_${node.textId}

    if not topic in topics_${node.textId}:
        topics_${node.textId}.append(topic)
        if (msg == b'True') or (msg == b'true'):
            inputs_${node.textId}.append(True)
        elif (msg == b'False') or (msg == b'false'):
            inputs_${node.textId}.append(False)
    
    if len(topics_${node.textId}) == nr_inputs_${node.textId}:
        result = True
        
        for entry in inputs_${node.textId}:
            result = result and entry
        
        loop = asyncio.get_event_loop()
        loop.create_task(on_output(result, output_topics_${node.textId}))
        inputs_${node.textId} = []
        topics_${node.textId} = []
    
    return\n`

            node.setMicropythonCode(code);
        }

    }
    RED.nodes.registerType("and", AndNode);
};
