/**
 * Copyright JS Foundation and other contributors, http://js.foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

module.exports = function (RED) {
    "use strict";

    function TemperatureHumidityNode(n) {
        RED.nodes.createNode(this, n);
        const node = this;
        this.name = n.name;
        this.pin = parseInt(n.pin);
        this.repeat = Boolean(n.repeat);
        this.interval = parseFloat(n.interval)
        this.micropythonCode = n.micropythonCode || "";
        this.setTags(["temperature", "humidity", "micropython"])
        
        generateMicropythonCode(this.pin);
        
        // @TODO: Make behaviour for javascript ?
        
        this.on("close", function () {
            this.status({});
        });


        /**
         * [MINE]
         * 
         * Generates micropython code that exxecutes the switch behaviour
         * 
         * @param {*} rules 
         */
        function generateMicropythonCode(pin, repeat, interval) {
            const code =
                `\nimport dht
import machine
output_topics_${node.textId} = [${node.outputTopics.map(a => `"${a}"`)}]
pin_${node.textId} = ${pin}
interval_${node.textId} = ${interval}
repeat_${node.textId} = ${repeat}

def on_input_${node.textId}(topic, msg, retained):
    global inputs_${node.textId}
    global topics_${node.textId}

    if not topic in topics_${node.textId}:
        topics_${node.textId}.append(topic)
        if (msg == b'True') or (msg == b'true'):
            inputs_${node.textId}.append(True)
        elif (msg == b'False') or (msg == b'false'):
            inputs_${node.textId}.append(False)
    
    if len(topics_${node.textId}) == nr_inputs_${node.textId}:
        result = True
        
        for entry in inputs_${node.textId}:
            result = result and entry
        
        loop = asyncio.get_event_loop()
        loop.create_task(on_output(result, output_topics_${node.textId}))
        inputs_${node.textId} = []
        topics_${node.textId} = []
    
    return\n

def measure():
    d = dht.DHT11(machine.Pin(5))
    d.measure()
    temperature = d.temperature()
    humidity = d.humidity()
    results = dict(
        "temperature"=temperature
        "humidity"=humidity
    )
    loop.create_task(on_output(results, output_topics_${node.textId}))
    
def exec_${node.textId}():
    if repeat_${node.textId}:
        timer = machine.Timer(-1)
        tim.init(period=interval_${node.textId}, mode=Timer.PERIODIC, callback=measure)
    else: 
        measure()
    return\n`

            node.setMicropythonCode(code);
        }

    }
    RED.nodes.registerType("temperature-humidity", TemperatureHumidityNode);
};
