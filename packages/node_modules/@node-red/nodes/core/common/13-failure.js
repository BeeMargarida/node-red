/**
 * Copyright JS Foundation and other contributors, http://js.foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

module.exports = function (RED) {
    "use strict";

    function FailureNode(n) {
        RED.nodes.createNode(this, n);
        const node = this;
        this.name = n.name;
        this.tags = n.tags;
        this.micropythonCode = n.micropythonCode || "";

        this.predicates = n.predicates.length === 0 ? [] : n.predicates.split(" "); 
        this.priorities = n.priorities.length === 0 ? [] : n.priorities.split(" "); 
        this.setPredicates(this.predicates);
        this.setPriorities(this.priorities);
        
        this.setInput(false);
        this.setNoWiresType(true);
        
        this.setGenerateCodeFunction(() => generateMicropythonCode(this.tags));
        
        // @TODO: Make behaviour for javascript ?
        
        this.on("close", function () {
            this.status({});
        });


        /**
         * [MINE]
         * 
         * Generates micropython code that executes the failure behaviour
         * 
         * @param {*} rules 
         */
        function generateMicropythonCode(tags) {
            const code =
                `\ntags_${node.textId} = [${tags.split(" ").map(tag => (`"${tag}"`))}]
def stop_${node.textId}():
    return

def exec_${node.textId}():
    for tag in tags_${node.textId}:
        if tag not in capabilities: return
    raise MemoryError()\n`

            node.setMicropythonCode(code);
        }

    }
    RED.nodes.registerType("failure", FailureNode);
};
