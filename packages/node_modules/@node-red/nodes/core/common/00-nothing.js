/**
 * Copyright JS Foundation and other contributors, http://js.foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

module.exports = function (RED) {
    "use strict";

    function NothingNode(n) {
        RED.nodes.createNode(this, n);
        const node = this;
        this.name = n.name;
        this.micropythonCode = n.micropythonCode || "";

        this.predicates = n.predicates.length === 0 ? [] : n.predicates.split(" "); 
        this.priorities = n.priorities.length === 0 ? [] : n.priorities.split(" "); 
        this.setPredicates(this.predicates);
        this.setPriorities(this.priorities);
        
        this.setGenerateCodeFunction(() => generateMicropythonCode(this.tags));
        
        this.on("input", function(msg) {
            this.send(msg);
        });


        /**
         * [MINE]
         * 
         * Generates micropython code that executes the failure behaviour
         * 
         * @param {*} rules 
         */
        function generateMicropythonCode(tags) {
            const code =
                `\n# import sys
# import utime
# if sys.platform != "linux":
    # from machine import Pin
input_topics_${node.textId} = [${node.inputTopics.map(a => `"${a}"`)}]
output_topics_${node.textId} = [${node.outputTopics.map(a => `"${a}"`)}]

def on_input_${node.textId}(topic, msg, retained):
    print(msg)
    loop = asyncio.get_event_loop()
    # if sys.platform != "linux":
        # led = Pin(2, Pin.OUT)
        # led.off()
        # utime.sleep(0.1)
        # led.on()
    loop.create_task(on_output(msg, output_topics_${node.textId}))
    return\n`

            node.setMicropythonCode(code);
        }

    }
    RED.nodes.registerType("nothing", NothingNode);
};
